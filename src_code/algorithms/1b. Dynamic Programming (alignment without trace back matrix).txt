
# Dynamic Programming Method with different traceback
def edit_distance_different_traceback(A, B):
    n = len(A)
    m = len(B)
    ED = np.zeros((n + 1, m + 1), dtype='int32')

    for i in range(m+1):
        ED[0,i] = i

    for j in range(n+1):
        ED[j,0] = j

    for k in range (1,n+1):
        for l in range(1,m+1):
            if A[k-1] == B[l-1]:
                ED[k,l] = ED[k-1, l-1]

            else:
                ED[k,l] = min(ED[k-1, l-1], ED[k, l-1], ED[k-1, l]) + 1

    #traceback
    tr = [] #list of actions
    p=n
    q=m
    while p>=0 or q>=0:
        if p>0 and q>0:
            if A[p-1] == B[q-1]:
                tr.append('D') 
                p= p-1
                q = q-1
            else:
                if ED[p-1,q-1] == min(ED[p-1,q-1],ED[p,q-1],ED[p-1,q]):
                    tr.append('D') #SUBSTITUTION
                    p = p - 1
                    q = q - 1
                elif ED[p,q-1] == min(ED[p-1,q-1],ED[p,q-1],ED[p-1,q]):
                    tr.append('L') #INSERTION
                    q=q-1
                else:
                    tr.append('U') #DELETION
                    p=p-1
        elif p==0 and q>0:
            tr.append('L')
            q=q-1
        elif p>0 and q==0:
            tr.append('U')
            p=p-1
        else:
            p=-1
            q=-1

#   Update A and B with alignment
    A2 = []
    B2 = []
    k = 0
    h = 0
    for i in range(len(tr), 0, -1):
        if tr[i-1] == 'D':
            A2.append(A[k])
            B2.append(B[h])
            k += 1
            h += 1
        elif tr[i-1] == 'U':
            A2.append(A[k])
            B2.append('-')
            k += 1
        elif tr[i-1] == 'L':
            A2.append('-')
            B2.append(B[h])
            h += 1
        
    return ED[n,m], A2, B2
